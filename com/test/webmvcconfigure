 */
@Configuration
@AutoConfigureAfter(CacheConfiguration.class)
public class WebConfigurer implements ServletContextInitializer,
		EmbeddedServletContainerCustomizer {

	private final Logger log = LoggerFactory.getLogger(WebConfigurer.class);

	@Inject
	private Environment env;

	@Autowired(required = false)
	private MetricRegistry metricRegistry;

	@Override
	public void onStartup(ServletContext servletContext)
			throws ServletException {
		log.info("Web application configuration, using profiles: {}",
				Arrays.toString(env.getActiveProfiles()));
		EnumSet<DispatcherType> disps = EnumSet.of(DispatcherType.REQUEST,
				DispatcherType.FORWARD, DispatcherType.ASYNC);
		if (!env.acceptsProfiles(Constants.SPRING_PROFILE_FAST)) {
			initMetrics(servletContext, disps);
		}
		if (env.acceptsProfiles(Constants.SPRING_PROFILE_PRODUCTION)) {
			initCachingHttpHeadersFilter(servletContext, disps);
			//initStaticResourcesProductionFilter(servletContext, disps);
			//initGzipFilter(servletContext, disps);
		}
		initCacheBusterFilter(servletContext, disps);
		log.info("Web application fully configured");
	}



	/**
	 * Set up Mime types.
	 */
	@Override
	public void customize(ConfigurableEmbeddedServletContainer container) {
		MimeMappings mappings = new MimeMappings(MimeMappings.DEFAULT);
		// IE issue, see https://github.com/jhipster/generator-jhipster/pull/711
		mappings.add("html", "text/html;charset=utf-8");
		// CloudFoundry issue, see
		// https://github.com/cloudfoundry/gorouter/issues/64
		mappings.add("json", "text/html;charset=utf-8");
		container.setMimeMappings(mappings);
	}

	/**
	 * Initializes the GZip filter.
	 */
	private void initGzipFilter(ServletContext servletContext,
			EnumSet<DispatcherType> disps) {
		log.debug("Registering GZip Filter");
		FilterRegistration.Dynamic compressingFilter = servletContext
				.addFilter("gzipFilter", new GZipServletFilter());
		Map<String, String> parameters = new HashMap<>();
		compressingFilter.setInitParameters(parameters);
		compressingFilter.addMappingForUrlPatterns(disps, true, "*.css");
		compressingFilter.addMappingForUrlPatterns(disps, true, "*.json");
		compressingFilter.addMappingForUrlPatterns(disps, true, "*.html");
		compressingFilter.addMappingForUrlPatterns(disps, true, "*.js");
		compressingFilter.addMappingForUrlPatterns(disps, true, "*.svg");
		compressingFilter.addMappingForUrlPatterns(disps, true, "*.ttf");
		compressingFilter.addMappingForUrlPatterns(disps, true, "/api/*");
		compressingFilter.addMappingForUrlPatterns(disps, true, "/metrics/*");
		compressingFilter.setAsyncSupported(true);
	}

	/**
	 * Initializes the cache buster filter.
	 */
	private void initCacheBusterFilter(ServletContext servletContext,
			EnumSet<DispatcherType> disps) {
		log.debug("Registering Cache Buster Filter");
		FilterRegistration.Dynamic cacheBusterFilter = servletContext
				.addFilter("cacheBusterFilter", new CacheBusterFilter());
		Map<String, String> parameters = new HashMap<>();
		cacheBusterFilter.setInitParameters(parameters);
		cacheBusterFilter.addMappingForUrlPatterns(disps, true, "/assets/*");
		cacheBusterFilter.addMappingForUrlPatterns(disps, true, "/scripts/*");
		cacheBusterFilter.addMappingForUrlPatterns(disps, true, "/bower_components/*");
		cacheBusterFilter.setAsyncSupported(true);
	}

	/**
	 * Initializes the static resources production Filter.
	 */
	private void initStaticResourcesProductionFilter(
			ServletContext servletContext, EnumSet<DispatcherType> disps) {

		log.debug("Registering static resources production Filter");
		FilterRegistration.Dynamic staticResourcesProductionFilter = servletContext
				.addFilter("staticResourcesProductionFilter",
						new StaticResourcesProductionFilter());

		staticResourcesProductionFilter.addMappingForUrlPatterns(disps, true,
				"/");
		staticResourcesProductionFilter.addMappingForUrlPatterns(disps, true,
				"/index.html");
		staticResourcesProductionFilter.addMappingForUrlPatterns(disps, true,
				"/assets/*");
		staticResourcesProductionFilter.addMappingForUrlPatterns(disps, true,
				"/scripts/*");
		staticResourcesProductionFilter.setAsyncSupported(true);
	}

	/**
	 * Initializes the cachig HTTP Headers Filter.
	 */
	private void initCachingHttpHeadersFilter(ServletContext servletContext,
			EnumSet<DispatcherType> disps) {
		log.debug("Registering Caching HTTP Headers Filter");
		FilterRegistration.Dynamic cachingHttpHeadersFilter = servletContext
				.addFilter("cachingHttpHeadersFilter",
						new CachingHttpHeadersFilter());

		cachingHttpHeadersFilter.addMappingForUrlPatterns(disps, true,
				"/assets/*");
		cachingHttpHeadersFilter.addMappingForUrlPatterns(disps, true,
				"/scripts/*");
		cachingHttpHeadersFilter.setAsyncSupported(true);
	}

	/**
	 * Initializes Metrics.
	 */
	private void initMetrics(ServletContext servletContext,
			EnumSet<DispatcherType> disps) {
		log.debug("Initializing Metrics registries");
		servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,
				metricRegistry);
		servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,
				metricRegistry);

		log.debug("Registering Metrics Filter");
		FilterRegistration.Dynamic metricsFilter = servletContext.addFilter(
				"webappMetricsFilter", new InstrumentedFilter());

		metricsFilter.addMappingForUrlPatterns(disps, true, "/*");
		metricsFilter.setAsyncSupported(true);

		log.debug("Registering Metrics Servlet");
		ServletRegistration.Dynamic metricsAdminServlet = servletContext
				.addServlet("metricsServlet", new MetricsServlet());

		metricsAdminServlet.addMapping("/metrics/metrics/*");
		metricsAdminServlet.setAsyncSupported(true);
		metricsAdminServlet.setLoadOnStartup(2);
	}

	@Bean
	public RestTemplate restTemplate() {
		return new RestTemplate();
	}

    @Bean
    ServletRegistrationBean h2servletRegistration() {
        ServletRegistrationBean registrationBean = new ServletRegistrationBean(new WebServlet());
        registrationBean.addUrlMappings("/console/*");
        return registrationBean;
    }
}
